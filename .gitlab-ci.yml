# Specify the docker image to use (only used if using docker runners)
# See: http://doc.gitlab.com/ee/ci/docker/using_docker_images.html
image: ubuntu:18.04

stages:
  - build
  - test

variables:
  EXE : "ircserv"

cache:
  paths:
    - clang_10/

# Define commands that run before each job's script
before_script:
  - apt-get update
  - apt-get install -y xz-utils curl build-essential
  - rm -rf /var/lib/apt/lists/*
  -  if ! [ -d ./clang_10/ ]; then curl -SL https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz | tar -xJC . && mv clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04 clang_10 ; fi
  - cp -r ./clang_10/bin/* /bin/.
  - cp -r ./clang_10/lib/* /lib/. 

# Try to compile our sample hello world app
build:
  stage: build
  script: make
  # Save the compiled output from the above for downloading via GitLab and in Gitlab 8.6 to use in future steps
  artifacts:
    paths:
    - "$EXE"

code_quality:
  image: docker:stable
  before_script:
    - echo
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json




test:
  stage: test
  script:
    # Verify that our compiled executable exists
  - test -f "$EXE"

